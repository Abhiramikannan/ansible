Objective: Create an Ansible role to install and configure the Nginx web server on a remote host.

Prerequisites:

    Ansible installed on your control machine.
    A target host where you want to install Nginx.

Step 1: 
	Create the Role Directory Structure

		Ansible roles 
			follow a specific directory structure. 
			You can use the ansible-galaxy command to generate the initial structure:

bash
	ansible-galaxy init nginx_role
	apt update -y && apt install tree 
	tree nginx_role


--------------------------------------------------
In Ansible, the directory structure, often referred to as the "Ansible project structure," helps organize your playbooks, roles, and related files. Each directory serves a specific purpose and contributes to making your Ansible projects more maintainable and structured. Below, I'll explain the main directories typically used in an Ansible project and provide a use case for each:

    ansible.cfg (Configuration File):
        The ansible.cfg file is not a directory but a configuration file that contains settings and configurations for Ansible. You can specify various options like the default inventory file, remote user, and more in this file.

    Use Case: You can use ansible.cfg to set default configurations for your Ansible project, which simplifies playbook execution by reducing the need for specifying options on the command line.

    inventory (Inventory Directory):
        The inventory directory typically contains files or scripts that define your inventory, which is a list of target hosts or groups of hosts on which you want to run Ansible tasks.

    Use Case: You can create inventory files to specify your target hosts and group them based on roles, environments, or other criteria. For example, you might have separate inventory files for production and development environments.

    group_vars (Group Variables Directory) and host_vars (Host Variables Directory):
        These directories allow you to define variables that apply either to groups of hosts or individual hosts, respectively.

    Use Case: Suppose you have a group of web servers that share common configurations. You can define variables specific to that group in a YAML file inside group_vars. Similarly, if you need host-specific variables, you can place them in YAML files inside host_vars.

    roles (Roles Directory):
        The roles directory is where you organize your Ansible roles. Roles are reusable collections of tasks, variables, and templates that help you manage configurations consistently across multiple hosts or environments.

    Use Case: You can create roles for various server roles, such as web servers, database servers, and load balancers. Each role contains the tasks and configurations needed for that specific role, making your playbooks more modular and maintainable.

    files (Files Directory):
        The files directory is where you can place files that need to be transferred to the target hosts during playbook execution. These files are typically not templates and are copied as-is.

    Use Case: If your playbook needs to copy configuration files or binaries to target hosts, you can place them in the files directory.

    templates (Templates Directory):
        The templates directory is used for Jinja2 templates that you can customize before transferring them to the target hosts. Templates allow you to create dynamic configurations based on variables.

    Use Case: If you need to generate configuration files with host-specific values or other dynamic content, you can use Jinja2 templates in the templates directory.

    tasks (Tasks Directory):
        The tasks directory can contain additional tasks or playbooks that are specific to your project or that you want to include separately from roles.

    Use Case: You can place playbooks or tasks here that are not part of a role but are still required for your project. This directory provides a convenient way to organize standalone tasks.

    handlers (Handlers Directory):
        The handlers directory contains Ansible handlers, which are tasks that are only executed when notified by other tasks. Handlers are typically used for actions like service restarts.

    Use Case: If you have tasks that should trigger specific actions only when changes occur (e.g., restart a service after a configuration change), you define those actions as handlers in this directory.

    vars (Variables Directory):
        The vars directory can contain YAML files with variable definitions that are relevant to your Ansible project.

    Use Case: If you have global variables that are not associated with specific roles or hosts, you can define them in YAML files within the vars directory.

   meta (Meta Directory):
        The meta directory contains files that provide metadata about Ansible roles. It is not required, but it can be used to specify dependencies, authorship, and other role-related information.

    Use Case: You can create a main.yml file within the meta directory to define role dependencies. This allows you to specify which roles need to be executed before or after the current role when included in a playbook.

    templates (Templates Directory):
        As mentioned earlier, the templates directory is used for storing Jinja2 templates. These templates are used to generate dynamic configuration files during playbook execution.

    Use Case: For instance, you might have a template for an Nginx configuration file (nginx.conf.j2) in the templates directory. This template can contain placeholders that are replaced with actual values based on variables defined in your playbook or role.

    tests (Tests Directory):
        The tests directory is typically used to write test cases for your Ansible roles. These tests can include scenarios to validate that the roles are functioning as expected.

    Use Case: When you are developing or maintaining Ansible roles, you can write tests in this directory using testing frameworks like Molecule or other testing tools. These tests help ensure the reliability and correctness of your roles.

    vars (Variables Directory):
        The vars directory, as mentioned earlier, can contain YAML files with variable definitions. These variables can be used to set role-specific or global variables.

    Use Case: Within a role, you might need specific variables that are used only by that role. Placing them in a YAML file within the vars directory helps keep role-specific variables organized and separate from other variables in the project.

These additional directories provide further organization and functionality to your Ansible project:

    meta helps manage role dependencies.
    templates is essential for creating dynamic configuration files.
    tests facilitates automated testing of your roles.
    vars is used for storing role-specific variables or global variables.

While these directories have specific purposes, their use can vary depending on the needs of your Ansible project. You can choose to include or omit them based on your project's requirements.

-------------------------------------------


Step 2: Define Role Tasks

Edit the tasks/main.yml file 
	inside the role directory (nginx_role/tasks/main.yml) 
	define the tasks for your role. 
	Add the following content:

yaml

---
- name: Update APT package cache
  become: yes
  apt:
    update_cache: yes

- name: Install Nginx
  become: yes
  apt:
    name: nginx
    state: present

- name: Start Nginx service
  become: yes
  service:
    name: nginx
    state: started
    enabled: yes

These tasks will update the package cache, install Nginx, and start the Nginx service on the target host.


Step 4: Create a Playbook to Use the Role

Create a playbook that uses the role you've created. 
	For example, create a file named install_nginx.yml:

yaml

---
- hosts: all #will work on ubuntu only 
  become: yes
  roles:
    - nginx_role

This playbook specifies the target hosts (web_servers) and assigns the nginx_role to those hosts.

Step 5: Run the Playbook

Now, you can run the playbook 
	to install Nginx 
		on the target host(s). 
	
bash

ansible-playbook -i <inventory_file> install_nginx.yml

Replace <inventory_file> with the path to your inventory file, which should contain the IP address or hostname of the target host(s).

Step 6: Verify Nginx Installation

After the playbook has completed successfully, you can verify Nginx's installation and status on the target host(s):

bash

ansible <target_host> -m command -a "nginx -v"  # Check Nginx version


That's it! You've created a simple Ansible role and used it in a playbook to install and configure Nginx on a remote host. You can expand on this by adding more tasks, variables, and roles to manage various aspects of your infrastructure.




-------------------------------------------------------------------------------------------------------------
More advanced use case 

In the defaults/main.yml file, define the default variables for your Nginx role:

yaml

---
nginx_port: 80
nginx_server_name: example.com



In the templates directory, create a template file (nginx_custom.conf.j2) for your Nginx configuration. This template will use the variables defined earlier:

nginx

server {
    listen {{ nginx_port }};
    server_name {{ nginx_server_name }};

    location / {
        root /var/www/html;
        index index.html;
    }
}


In the tasks/main.yml file, add the below 


- name: Create Nginx config file
  template:
    src: nginx_custom.conf.j2
    dest: /etc/nginx/sites-available/{{ nginx_server_name }}
  notify:
    - Reload Nginx

- name: Enable Nginx site
  file:
    src: /etc/nginx/sites-available/{{ nginx_server_name }}
    dest: /etc/nginx/sites-enabled/{{ nginx_server_name }}
    state: link
  notify:
    - Reload Nginx
	
	
To ensure Nginx is reloaded whenever the configuration changes, create a handler in the handlers/main.yml file:

yaml

- name: Reload Nginx
  service:
    name: nginx
    state: reloaded


Now execute the playbook	


