https://mindmajix.com/ansible-tower-tutorial
Ansible Tower Features and Capabilities 
1. Automation Dashboard

It shows a heads-up NOC-style automation dashboard that contains information about everything going on in your Ansible environment.

2. Delegation and Self-Service

It imports users, teams, and organizations from your SAML, AD, or LDAP directory, and delegates push-button access to automation with easy question and answer configuration, automatic scheduling, and more.

3. Scale-out Clustering

Connect multiple Tower nodes into a Tower cluster to add redundancy and capacity to your automation platform, including reserved capacity and remote execution points of presence. Add push-button deployment and scaling when running in Red Hat OpenShift Container Platform.

4. Role-Based Access Control

Creates the necessary separation and isolation of users and resources.  Users can safely use Ansible Tower to work only on the systems in the environments to which they have access.

5. Create automation workflows

Ansible Tower workflows allow you to chain together different automation tasks to create workflows. Model your processes and deployments natively in Tower, including recovery from failures, chained workflows, and more.

 MindMajix YouTube Channel

6. Auditing and Logging

All automation is securely logged and stored, with a full audit trail. Send logs to external logging and analytics platforms for detailed analysis and correlations with other alerting and management systems.

7. Inventory Management

Sync inventory from all major cloud and virtualization providers, or add custom inventory. Integrate with Red Hat Insights to view Insights Alerts and perform playbook remediation.

8. Comprehensive REST API and integrations

Stay informed of your automation status via integrated notifications, and use the REST API to connect automation to source control, continuous delivery systems, ticketing systems, and more.




1. Ansible Tower Dashboard: It displays everything which is going on in your Ansible environment, such as the inventory status, the recent job activity, the hosts, and so on.

2. Multi-Playbook Workflows: It allows to chain any numbers of playbooks, any way of the usage of different inventories, runs different users, or utilizes various credentials.

3. Real-Time Job Updates: Ansible can automate the complete infrastructure. Also, you can see real-time job updates such as plays and tasks broken down by each machine either been successful or failure. Therefore you can see the status of your automation and know what's next in the queue.

4. Scale Capacity with Cluster: You can connect multiple Ansible Tower nodes into an Ansible Tower cluster as the clusters add redundancy and capacity, which allows scaling Ansible automation across the enterprise.

5. Self-Service: You can launch playbooks with just a single click through this feature.

6. Remote Command Execution: With this command, you can run simple tasks such as restart any malfunctioning service, add users, reset passwords on any host or group of hosts in the inventory.

7. Manage and Track Inventory: It manages your entire infrastructure by pulling inventory from public cloud providers such as Microsoft Azure, amazon web services, etc.

8. Integrated Notification: This notifies you when a job succeeds or fails across the entire organization at once, or customize on a pre-job basis.

9. Schedule Ansible Jobs: It schedule different kinds of jobs such as playbook runs, cloud inventory updates, and source control updates to run according to the need.

10. REST API and Tower CLI Tool: Every feature present in Ansible Tower is available through the Ansible Tower's REST API, which provides the ideal API for the systems management infrastructure. The Ansible Tower's CLI tool is available for launching jobs from CI systems such as Jenkins, or when you need to integrate with other command-line tools.


Ansible Roles
Roles provide a framework for fully independent or interdependent collections of files, tasks, templates, variables, and modules.

The role is the primary mechanism for breaking a playbook into multiple files. This simplifies writing complex playbooks and makes them easier to reuse. The breaking of the playbook allows you to break the playbook into reusable components.

Each role is limited to a particular functionality or desired output, with all the necessary steps to provide that result either within the same role itself or in other roles listed as dependencies.

Roles are not playbooks. Roles are small functionality that can be used within the playbooks independently. Roles have no specific setting for which hosts the role will apply.



Top-level playbooks are the bridge holding the hosts from your inventory file to roles that should be applied to those hosts.

Creating a Role
The directory structure for roles is essential to creating a new role, such as:

Role Structure

The roles have a structured layout on the file system. You can change the default structured of the roles as well.

For example, let us stick to the default structure of the roles. Each role is a directory tree in itself. So the role name is the directory name within the /roles directory.



 ansible-galaxy -h   
 
    1  ansible-galaxy
    2  ansible-galaxy -h
    3  ansible-galaxy role -h
    4  ansible-galaxy role init vilas
    5  tree
    6  yum install tree -y
    7  sudo yum install tree -y
    8  tree
	
	
The YAML file in the default directory contains a list of default variables that are to be used along with the playbook.
The handler's directory is used to store handlers.
The meta-directory is supposed to have information about the author and role dependencies.
The tasks directory is the main YAML file for the role.
The tests directory contains a sample YAML playbook file and a sample inventory file and is mostly used for testing purposes before creating the actual role.
The vars directory contains the YAML file in which all the variables used by the role will be defined. The directory templates and the directory files should contain files and templates that will be used by the tasks in the role.

https://docs.ansible.com/ansible-tower/3.8.6/html/userguide/search_sort.html


	1. Inventory

		+ in inventory
		give a name
		save
		+ groups
		give a name
		save
		+ hosts
		host name: mention ip address
		
	
	2. Credential
		+ give a name
		Credential type: "Machine"
		username: ec2_user/centos/ubuntu
		ignore pwd
		give private key from your machine (.pem)
		
	3. Project
		+ give name
		#if we select SCM Type: Manual - /var/lib/awx/projects
		SCM Type: git 
			url: git complete url
		SCM UPDATE OPTIONS: 
		save
		
			
	4. Template
		+ Name
		Joby Type: Run
		Inventory: select the one created
		Project: select  the one created
		Playbook: Select the playbook from 
		Credential: select  the one created
	
	
Change admin pwd.		
	tower-manage changepassword admin		

manage tower
	ansible-tower-service --help